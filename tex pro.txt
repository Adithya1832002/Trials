fuck
import gzip
hello hi
adithyab
import pandas as pd

from nqm_core.views.exception_handlers import TemplateNotFoundError, DateMisMatchError
from nqm_core.views.process.raw_text.additional_insights import get_additional_insights_summary
from nqm_core.views.process.raw_text.preprocess_detected_text import get_raw_text_list_from_raw_output
from nqm_core.views.process.raw_text.preprocess_detected_text import get_raw_text_list_from_raw_output_v2
from nqm_core.views.process.raw_text.process_without_summary import process_bank_statement_without_summary
from nqm_core.views.process.raw_text.summary import get_statement_summary, get_summary_indices
from nqm_core.views.process.raw_text.transaction_list import get_transactions_list
from nqm_core.views.process.raw_text.utils import standardize_amount_column, \
    deposit_and_withdrawal_from_beginning_balance, get_amount_from_statement
from nqm_core.views.process.raw_text.validation import deposit_marker_exists
from nqm_core.views.process.utils.statement_period import get_statement_date


def get_txn_list_for_config(raw_text_list, txn_config, all_summary_indices):
    report_columns = ["DATE", "DESCRIPTION", "SHORT DESCRIPTION", "AMOUNT", "DAY", "MONTH", "YEAR"]
    txn_columns = txn_config.get("txn_columns", report_columns)
    default_description = txn_config.get("default_description", "NO DESC")
    date_found_within = txn_config.get("date_found_within", 25)

    if "BALANCES" in txn_columns and "BALANCES" not in report_columns:
        report_columns.append("BALANCES")
    transactions_list_df = pd.DataFrame(columns=report_columns)

    for i, idx in enumerate(all_summary_indices):
        if i < len(all_summary_indices) - 1:
            raw_text_list_slice = raw_text_list[:date_found_within] + raw_text_list[idx:all_summary_indices[i + 1]]
        else:
            raw_text_list_slice = raw_text_list[:date_found_within] + raw_text_list[idx:]

        partial_transaction_df = get_transactions_list(raw_text_list_slice, txn_config)

        if partial_transaction_df is not None and len(partial_transaction_df) > 0:
            transactions_list_df = transactions_list_df.append(partial_transaction_df, ignore_index=True)

    transactions_list_df["SHORT DESCRIPTION"] = transactions_list_df["SHORT DESCRIPTION"].astype(str).str.replace(
        "NO DESC", default_description)

    return transactions_list_df


def process_bank_statement(raw_output, config, engine='TEXTRACT', ignore_qc=False, statement_text=None):
    summary_config = config.get("summary_config", {})
    general_config = config.get("general_config", {})
    deposits_config = config.get("deposits_config", {})
    withdrawals_config = config.get("withdrawals_config", None)
    columns_types = deposits_config.get("columns_types", {})
    customer_info_config = config.get("customer_info_config", None)
    process_without_summary = general_config.get("process_without_summary", False)
    date_format_regex = deposits_config.get("date_format_regex", None)
    statement_date_index = deposits_config.get("statement_date_index", -1)
    date_order = config.get("date_order", [0, 1, 2])

    if engine == 'VISION':
        config_override_ocr_cv = config.get("config_override_ocr_cv", None)
        if config_override_ocr_cv:
            summary_config.update(config_override_ocr_cv.get("summary_config", {}))
            general_config.update(config_override_ocr_cv.get("general_config", {}))
            deposits_config.update(config_override_ocr_cv.get("deposits_config", {}))
            if withdrawals_config:
                withdrawals_config.update(config_override_ocr_cv.get("withdrawals_config", {}))
            if customer_info_config:
                customer_info_config.update(config_override_ocr_cv.get("customer_info_config", {}))

        raw_text_list = get_raw_text_list_from_raw_output_v2(raw_output, deposits_config, customer_info_config)
    else:
        raw_text_list = get_raw_text_list_from_raw_output(raw_output, deposits_config, customer_info_config)

    if process_without_summary:
        txn_list_df = process_bank_statement_without_summary(raw_text_list, config, ignore_qc)
        txn_list_df["AMOUNT"] = txn_list_df["AMOUNT"].astype(float)
        deposit_txn = txn_list_df[txn_list_df["AMOUNT"] >= 0]
        withdrawal_txn = txn_list_df[txn_list_df["AMOUNT"] < 0]

        total_deposits = deposit_txn["AMOUNT"].astype(float).sum()
        total_subtractions = withdrawal_txn["AMOUNT"].astype(float).sum()

        additional_insights = get_additional_insights_summary(deposit_txn, withdrawal_txn, total_deposits,
                                                              total_subtractions, raw_text_list, customer_info_config)

        if "QC" in txn_list_df.columns:
            qc = txn_list_df.iloc[0]["QC"]
            additional_insights["QC"] = qc
        if "DEP_DIFFERENCE" in txn_list_df.columns:
            overall_difference = txn_list_df.iloc[0]["DEP_DIFFERENCE"]
            additional_insights["DEP_DIFFERENCE"] = overall_difference
            deposit_txn.drop('DEP_DIFFERENCE', inplace=True, axis=1)
            withdrawal_txn.drop('DEP_DIFFERENCE', inplace=True, axis=1)

        deposit_txn = deposit_txn.copy()
        deposit_txn["SHORT DESCRIPTION"] = deposit_txn["SHORT DESCRIPTION"].astype(str).str.capitalize().str.replace(
            "No txn", "Deposit")
        deposit_txn["SHORT DESCRIPTION"] = deposit_txn["SHORT DESCRIPTION"].astype(str).str.capitalize().str.replace(
            "No desc", "Deposit")
        deposit_txn["DESCRIPTION"] = deposit_txn["DESCRIPTION"].astype(str).str.replace("NO TXN", "*DEPOSIT")
        deposit_txn["DESCRIPTION"] = deposit_txn["DESCRIPTION"].astype(str).str.replace("NO DESC", "*DEPOSIT")

        return deposit_txn, withdrawal_txn, None, additional_insights

    deposit_total_markers = deposits_config.get("total_marker", ["Deposits"])
    deposit_total_markers_pos = deposits_config.get("total_marker_pos", [1])

    subtractions_summary_keys = summary_config.get("subtractions_summary_keys", None)
    all_summary_indices = get_summary_indices(raw_text_list, summary_config)
    summary = get_statement_summary(raw_text_list, summary_config, general_config)

    infer_deposit_from_beginning_balance = general_config.get("infer_deposit_from_beginning_balance", False)

    if summary is not None and len(summary) > 0:
        deposit_exist = deposit_marker_exists(raw_text_list, deposits_config)

        deposit_summary = summary[summary["Description"].isin(deposit_total_markers)]
        deposit_summary = deposit_summary.copy()
        deposit_summary["Amount"] = deposit_summary["Amount"].astype(float).abs()

        if len(deposit_summary) == 0:
            if deposit_exist:
                deposit_total = get_amount_from_statement(raw_text_list, deposit_total_markers,
                                                          deposit_total_markers_pos)
                if deposit_total is None:
                    raise TemplateNotFoundError(
                        "Unexpected Format. Deposit summary and deposit total couldn't be reliably determined")

                deposits_total_summary = {
                    "Description": deposit_total_markers[0],
                    "Amount": deposit_total
                }
                deposit_summary = deposit_summary.append(deposits_total_summary, ignore_index=True)
                deposit_summary["Amount"] = deposit_summary["Amount"].astype(float).abs()
            else:
                raise TemplateNotFoundError(
                    "Unexpected Format. Deposit location couldn't be reliably determined in summary and statement")

        total_deposits_as_per_summary = deposit_summary["Amount"].sum()

        if subtractions_summary_keys is None:
            subtraction_summary = summary[summary["Amount"] < 0]
            if len(subtraction_summary) == 0 and withdrawals_config:
                withdrawals_total_markers = withdrawals_config.get("total_marker", ["Inferred Withdrawals"])
                withdrawals_total_markers_pos = withdrawals_config.get("total_marker_pos", [1])
                subtraction_total = get_amount_from_statement(raw_text_list, withdrawals_total_markers,
                                                              withdrawals_total_markers_pos)
                subtraction_total_summary = {
                    "Description": withdrawals_total_markers[0],
                    "Amount": subtraction_total
                }
                subtraction_summary = subtraction_summary.append(subtraction_total_summary, ignore_index=True)
                subtraction_summary = subtraction_summary.copy()
                subtraction_summary["Amount"] = subtraction_summary["Amount"].astype(float).abs() * -1
                total_subtractions_as_per_summary = subtraction_summary["Amount"].sum()
            else:
                total_subtractions_as_per_summary = summary[summary["Amount"] < 0]["Amount"].sum()
        else:
            subtraction_summary = summary[summary["Description"].isin(subtractions_summary_keys)]
            subtraction_summary = subtraction_summary.copy()
            subtraction_summary["Amount"] = subtraction_summary["Amount"].astype(str).str.replace("-", "")
            subtraction_summary["Amount"] = subtraction_summary["Amount"].astype(float) * -1
            total_subtractions_as_per_summary = subtraction_summary["Amount"].sum()

        transactions_list_df = get_txn_list_for_config(raw_text_list, deposits_config, all_summary_indices)
        transactions_list_df = standardize_amount_column(transactions_list_df, general_config, column_name="AMOUNT")
        transactions_list_df = transactions_list_df.astype(columns_types)

        if withdrawals_config is None:
            if not infer_deposit_from_beginning_balance:
                deposit_txn = transactions_list_df[transactions_list_df["AMOUNT"] >= 0]
                withdrawal_txn = transactions_list_df[transactions_list_df["AMOUNT"] < 0]
                if deposit_txn.empty:
                    no_deposit_transactions = transactions_list_df.iloc[0]
                    no_deposit_transactions.loc["DESCRIPTION"] = "NO TXN"
                    no_deposit_transactions.loc["SHORT DESCRIPTION"] = "NO TXN"
                    no_deposit_transactions.loc["AMOUNT"] = 0
                    deposit_txn = deposit_txn.append(no_deposit_transactions)
            else:
                deposit_txn, withdrawal_txn = deposit_and_withdrawal_from_beginning_balance(transactions_list_df,
                                                                                            raw_text_list,
                                                                                            general_config)

        else:
            deposit_txn = transactions_list_df[transactions_list_df["AMOUNT"] >= 0]
            if len(deposit_txn) == len(transactions_list_df):
                withdrawal_txn = get_txn_list_for_config(raw_text_list, withdrawals_config, all_summary_indices)
                withdrawal_txn["AMOUNT"] = withdrawal_txn["AMOUNT"].astype(str).str.replace("-", "")
                withdrawal_txn["AMOUNT"] = withdrawal_txn["AMOUNT"].astype(float) * -1
            else:
                withdrawal_txn = transactions_list_df[transactions_list_df["AMOUNT"] < 0]

        total_deposit_from_txn_list = deposit_txn["AMOUNT"].sum()
        difference = round(float(total_deposit_from_txn_list), 2) - round(float(total_deposits_as_per_summary), 2)

        qc = "PASS" if difference == 0 else "FAIL"
        deposit_txn["QC"] = qc

        if total_subtractions_as_per_summary == 0:
            total_subtractions_as_per_summary = withdrawal_txn["AMOUNT"].abs().sum() * -1

        statement_date = get_statement_date(raw_text_list, date_format_regex, statement_date_index, date_order)
        statement_month = statement_date.split('-')[0]
        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        if list(deposit_txn["DATE"])[-1].split('-')[0] != months[int(statement_month) - 1] or \
                list(withdrawal_txn["DATE"])[-1].split('-')[0] != months[
            int(statement_month) - 1] or ignore_qc is False:
            raise DateMisMatchError(f"Statement date incorrect")

        additional_insights = get_additional_insights_summary(deposit_txn, withdrawal_txn, total_deposit_from_txn_list,
                                                              total_subtractions_as_per_summary, raw_text_list,
                                                              customer_info_config)
        additional_insights["QC"] = qc
        additional_insights["DEP_DIFFERENCE"] = difference

        deposit_txn = deposit_txn.copy()
        deposit_txn["SHORT DESCRIPTION"] = deposit_txn["SHORT DESCRIPTION"].astype(str).str.capitalize().str.replace(
            "No txn", "Deposit")
        deposit_txn["SHORT DESCRIPTION"] = deposit_txn["SHORT DESCRIPTION"].astype(str).str.capitalize().str.replace(
            "No desc", "Deposit")
        deposit_txn["DESCRIPTION"] = deposit_txn["DESCRIPTION"].astype(str).str.replace("NO TXN", "*DEPOSIT")
        deposit_txn["DESCRIPTION"] = deposit_txn["DESCRIPTION"].astype(str).str.replace("NO DESC", "*DEPOSIT")

        return deposit_txn, withdrawal_txn, summary, additional_insights




